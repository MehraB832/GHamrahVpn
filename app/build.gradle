plugins {
    id 'com.android.application'
}

android {
    namespace 'com.gold.hamrahvpn'
    compileSdk 34

    defaultConfig {
        applicationId "com.gold.hamrahvpn"
        minSdk 21
        targetSdk 34
        versionCode 8
        versionName "1.3.3"

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs "en", "fa"
        multiDexEnabled true
    }

    aaptOptions {
        cruncherEnabled = false
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'MissingTranslation'//, 'ManifestResource'
    }
    buildFeatures {
        viewBinding true
        buildConfig true
        // aidl (openvpn)
        aidl true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java.srcDirs += 'src/main/java'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' // select ABIs to build APKs for
            universalApk true // generate an additional APK that contains all the ABIs
        }
    }

    // map for the version code
    project.ext.versionCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

    applicationVariants.configureEach { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            // output build file
            output.outputFileName = "HamrahVpn(GOLD)_" + variant.versionName + "_" + output.getFilter(com.android.build.OutputFile.ABI) + ".apk"

            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) *
                            1000000 + android.defaultConfig.versionCode
        }
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // set to true to have all release builds run lint on issues with severity=fatal
        // and abort the build (controlled by abortOnError above) if fatal issues are found
        checkReleaseBuilds true
        // if true, only report errors
        ignoreWarnings true
        // if true, emit full/absolute paths to files with errors (true by default)
        //absolutePaths true
        // if true, check all issues, including those that are off by default
        checkAllWarnings true
        // if true, treat all warnings as errors
        warningsAsErrors true
        // turn off checking the given issue id's
        disable 'TypographyFractions','TypographyQuotes', 'MissingTranslation'//, 'ManifestResource'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar', '*.jar'], exclude: [])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'

    implementation 'androidx.browser:browser:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation 'com.airbnb.android:lottie:6.3.0'
    implementation 'com.android.support:support-annotations:28.0.0'

    //test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}